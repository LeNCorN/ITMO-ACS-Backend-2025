services:
  # Auth Database
  auth-db:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=authdb
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - app-network

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    container_name: auth-service
    restart: always
    env_file:
      - ./auth-service/.env
    ports:
      - "8001:8001"
    depends_on:
      - auth-db
    networks:
      - app-network

  # Training Database
  training-db:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=trainingdb
    volumes:
      - training-db-data:/var/lib/postgresql/data
    networks:
      - app-network

  # Training Service
  training-service:
    build:
      context: .
      dockerfile: ./training-service/Dockerfile
    container_name: training-service
    restart: always
    env_file:
      - ./training-service/.env
    ports:
      - "8002:8002"
    depends_on:
      - training-db
      - auth-service
    networks:
      - app-network

  # Reference Database
  reference-db:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=referencedb
    volumes:
      - reference-db-data:/var/lib/postgresql/data
    networks:
      - app-network

  # Reference Service
  reference-service:
    build:
      context: .
      dockerfile: ./reference-service/Dockerfile
    container_name: reference-service
    restart: always
    env_file:
      - ./reference-service/.env
    ports:
      - "8003:8003"
    depends_on:
      - reference-db
      - auth-service
    networks:
      - app-network

  # Notes Database
  notes-db:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=notesdb
    volumes:
      - notes-db-data:/var/lib/postgresql/data
    networks:
      - app-network

  # Notes Service
  notes-service:
    build:
      context: .
      dockerfile: ./notes-service/Dockerfile
    container_name: notes-service
    restart: always
    env_file:
      - ./notes-service/.env
    ports:
      - "8004:8004"
    depends_on:
      - notes-db
      - auth-service
    networks:
      - app-network

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - auth-service
      - training-service
      - reference-service
      - notes-service
    networks:
      - app-network

  # Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  # Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      - GF_SERVER_ROOT_URL=http://localhost/grafana
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  auth-db-data:
  training-db-data:
  reference-db-data:
  notes-db-data:
  grafana-data:
